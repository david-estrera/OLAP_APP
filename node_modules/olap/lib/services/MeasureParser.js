const QueryTemplate = require('../helpers/QueryTemplate');
const API = require('./API');
const chalk = require('chalk');

class MeasureParser {
    constructor(config) {
        this.api = new API(config);
    }

    parser({ cube, measures, dimensions }, callback) {

        if(measures.length > 0) {

            const measure = measures[0];
            const dim = JSON.parse(JSON.stringify(dimensions));

            console.log(` > [${measure.caption}] `);

            this.parserDimension(0, { cube, measure, dimensions: dim }, () => {
                measures.splice(0, 1);
                this.parser({ cube, measures, dimensions }, callback);
            });
        }
        else {
            callback();
        }
    }

    parserDimension(allValue, { cube, measure, dimensions }, callback) {

        if(dimensions.length > 0) {
            const dimension = dimensions[0];
            const query = QueryTemplate.generateQuery({ cube, measure, dimension });

            this.api.executeQuery(query, measure.type).then((value) => {

                if(dimension.caption === '(All)') {
                    allValue = value;
                    console.log(`    > ${dimension.hierarchyUniqueName}[All] - ${allValue}`)
                }
                else {
                    if(allValue === value) {
                        console.log(chalk.green(`        > [${dimension.caption}] - ${allValue === value} : ${value} : diff = ${allValue - value}`));
                    }
                    else {
                        console.log(chalk.red(`        > [${dimension.caption}] - ${allValue === value} : ${value} : diff = ${allValue - value}`));
                    }
                }

                dimensions.splice(0, 1);
                this.parserDimension(allValue, { cube, measure, dimensions }, callback);
            });
        }
        else {
            callback();
        }
    }
}

module.exports = MeasureParser;
