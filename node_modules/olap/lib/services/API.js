const Helpers = require('../helpers/Helpers');

class API {
    constructor(config) {
        this.config = config;
        this.auth = `Basic ${new Buffer(`${config.username}:${config.password}`).toString('base64')}`;
    }

    getCube(cube) {

        const requestData = {
            url: `${this.config.host}/pentaho/plugin/saiku/api/admin/discover`,
            method: 'GET',
            json: true,
            headers: {
                'cache-control': 'no-cache',
                authorization: this.auth
            }
        };

        return Helpers.request(requestData).then((data) => {
            let currentCube;

            // cubes
            for(let i = 0, len = data.length; i < len; i++) {
                for(let j = 0, jlen = data[i].catalogs.length; j < jlen; j++) {
                    for(let k = 0, klen = data[i].catalogs[j].schemas.length; k < klen; k++) {
                        for(let w = 0, wlen = data[i].catalogs[j].schemas[k].cubes.length; w < wlen; w++) {
                            currentCube = data[i].catalogs[j].schemas[k].cubes[w];

                            if(cube.cube === currentCube.name && cube.schema === currentCube.schema) {
                                this.config.measures = cube.measures;
                                return currentCube;
                            }
                        }
                    }
                }
            }
        });
    }

    getMeasures(cube) {
        const cubePath = cube.uniqueName.replace(/\[|\]/g, '').replace(/\./g, '/').replace(/ /g, '%20');

        const requestData = {
            url: `${this.config.host}/pentaho/plugin/saiku/api/admin/discover/${cubePath}/measures`,
            method: 'GET',
            json: true,
            headers: {
                'cache-control': 'no-cache',
                authorization: this.auth
            }
        };

        return Helpers.request(requestData).then((data) => {
            const measures = [];
            let measure;

            // measures
            for(let i = 0, len = data.length; i < len; i++) {
                measure = this.config.measures.filter(m => m.measure === data[i].caption);
                if(measure.length > 0) {
                    data[i].type = measure[0].type;
                    measures.push(data[i]);
                }
            }

            return measures;
        });
    }

    getDimensions(cube) {
        const cubePath = cube.uniqueName.replace(/\[|\]/g, '').replace(/\./g, '/').replace(/ /g, '%20');

        const requestData = {
            url: `${this.config.host}/pentaho/plugin/saiku/api/admin/discover/${cubePath}/dimensions`,
            method: 'GET',
            json: true,
            headers: {
                'cache-control': 'no-cache',
                authorization: this.auth
            }
        };

        return Helpers.request(requestData).then((data) => {

            const dimensions = [];

            for(let i = 0, len = data.length; i < len; i++) {
                for(let j = 0, jlen = data[i].hierarchies.length; j < jlen; j++) {
                    for(let k = 0, klen = data[i].hierarchies[j].levels.length; k < klen; k++) {
                        dimensions.push(data[i].hierarchies[j].levels[k]);
                    }
                }
            }

            return dimensions;
        });
    }

    executeQuery(body, type) {
        const requestData = {
            url: `${this.config.host}/pentaho/plugin/saiku/api/api/query/execute`,
            method: 'POST',
            json: true,
            headers: {
                'cache-control': 'no-cache',
                'Accept': 'application/json, text/javascript, */*',
                authorization: this.auth
            },
            body: body
        };

        return Helpers.request(requestData).then((data) => {

            const cellset = data.cellset;
            let cell;
            let cellValue;
            let value = 0;
            let count = 0;

            if(cellset) {
                for(let i = 0, len = cellset.length; i < len; i++) {
                    for(let j = 1, jlen = cellset[i].length; j < jlen; j++) {
                        cell = cellset[i][j].value
                                        .replace('R$', '')
                                        .replace('%', '')
                                        .replace(/\./g, '')
                                        .replace(',', '.');
                        cellValue = Number(cell);

                        if(!isNaN(cellValue)) {
                            value += cellValue;
                            count++;
                        }
                    }
                }
            }

            if(type === 'avg' && count > 0) {
                value = value/count;
            }

            return value;
        });
    }
}

module.exports = API;
